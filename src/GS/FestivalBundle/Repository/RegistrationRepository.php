<?php

namespace GS\FestivalBundle\Repository;

use GS\FestivalBundle\Entity\Level;
use GS\FestivalBundle\Entity\Registration;
use GS\FestivalBundle\Entity\Festival;
use GS\PersonBundle\Entity\Person;

/**
 * RegistrationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RegistrationRepository extends \Doctrine\ORM\EntityRepository
{

    public function getRegistrations($festivalId = null)
    {
        $qb = $this->createQueryBuilder('a');
        if ($festivalId !== null) {
            $qb
                    ->leftJoin('a.level', 'lvl')
                    ->addSelect('lvl')
                    ->leftJoin('lvl.festival', 'festival')
                    ->addSelect('festival')
                    ->andWhere('festival.id = :id')
                    ->setParameter('id', $festivalId);
        }
        return $qb->getQuery()->getResult();
    }

    public function getSortedForLevel(Level $level)
    {
        $leaders = $this->getLeadersForLevel($level);
        $followers = $this->getFollowersForLevel($level);

        $result = array();
        while ($current = $this->getNextCouple($leaders, $followers)) {
            $result[] = $current;
        }

        return $result;
    }

    private function getNextCouple(array &$leaders, array &$followers)
    {
        if (count($leaders) == 0 && count($followers) == 0) {
            return null;
        } else if (count($leaders) == 0) {
            return [null, array_shift($followers)];
        } else if (count($followers) == 0) {
            return [array_shift($leaders), null];
        } else if ($leaders[0]->getId() < $followers[0]->getId()) {
            return $this->getNextFullCouple($leaders, $followers);
        } else if ($leaders[0]->getId() > $followers[0]->getId()) {
            return array_reverse($this->getNextFullCouple($followers, $leaders));
        }
        
        throw new \LogicException('This code should not be reached!');
    }

    private function getNextFullCouple(array &$p1s, array &$p2s)
    {
        $p1 = array_shift($p1s);
        $p2 = $this->getAssociatedPartner($p1, $p2s);
        if ($p2 === null) {
            // If we cannot find a partner to p1 it means p1 does not have
            // a partner defined and all p2s have a partner defined.
            // Thus the next couple will be the first p2 with its partner.
            array_unshift($p1s, $p1);
            $p2 = array_shift($p2s);
            $p1 = $this->getAssociatedPartner($p2, $p1s);
        }
        return [$p1, $p2];
    }

    private function getAssociatedPartner(Registration $current, array &$registrations)
    {
        $result = null;
        if (null !== $current->getPartner()) {
            // If the registration has a partner: done!
            if (($key = array_search($current->getPartner(), $registrations)) !== false) {
                $result = $current->getPartner();
                // We withdraw the partner from the list of remaining registrations
                unset($registrations[$key]);
                // Force reassignment of the key from 0 to end of array
                $registrations = array_values($registrations);
            }
        } elseif ($registrations) {
            // Else if there are still some remaining registrations,
            // We try to find a partner to our current registration.
            // We pick the first one available.
            $temp = array_shift($registrations);
            if (null !== $temp->getPartner()) {
                // If this one has a partner, it cannot be the partner of our lonely registration.
                // So we try to find a partner among the remaining registrations.
                $result = $this->getAssociatedPartner($current, $registrations);
                array_unshift($registrations, $temp);
            } else {
                // If this registration has no partner, we match it with the current registration.
                $result = $temp;
            }
        }
        return $result;
    }

    public function getLeadersForLevel(Level $level)
    {
        $qb = $this->createQueryBuilder('a');
        $qb
                ->where('a.level = :level')
                ->setParameter('level', $level)
                ->andWhere('a.role = :isTrue')
                ->setParameter('isTrue', true);

        return $qb->getQuery()->getResult();
    }

    public function getFollowersForLevel(Level $level)
    {
        $qb = $this->createQueryBuilder('a');
        $qb
                ->where('a.level = :level')
                ->setParameter('level', $level)
                ->andWhere('a.role = :isFalse')
                ->setParameter('isFalse', false);

        return $qb->getQuery()->getResult();
    }

    public function getForPersonAndFestival(Festival $festival, Person $person)
    {
        $qb = $this->createQueryBuilder('a');
        $qb
                ->leftJoin('a.level', 'lvl')
                ->addSelect('lvl')
                ->where('a.status != :cancelled')
                ->andWhere('a.person = :person')
                ->setParameter('person', $person)
                ->andWhere('lvl.festival = :festival')
                ->setParameter('festival', $festival)
                ->setParameter('cancelled', 'cancelled');

        return $qb->getQuery()->getResult();
    }

    public function getPartner(Registration $registration)
    {
        $qb = $this->createQueryBuilder('a');
        $qb
                ->leftJoin('a.level', 'lvl')
                ->addSelect('lvl')
                ->leftJoin('a.person', 'p')
                ->addSelect('p')
                ->where('lvl = :lvl')
                ->andwhere('a.status != :cancelled')
                ->andWhere('a.role != :role')
                ->andWhere($qb->expr()->orX('p.email = :email', 'p.lastName = :ln'))
                ->setParameter('role', $registration->getRole())
                ->setParameter('email', $registration->getPartnerEmail())
                ->setParameter('ln', $registration->getPartnerLastName())
                ->setParameter('cancelled', 'cancelled')
                ->setParameter('lvl', $registration->getLevel());

        return $qb->getQuery()->getResult();
    }

    public function getPossiblePartners(Registration $registration)
    {
        $qb = $this->createQueryBuilder('a');
        $qb
                ->leftJoin('a.level', 'lvl')
                ->addSelect('lvl')
                ->andWhere('lvl = :lvl')
                ->andwhere('a.status != :cancelled')
                ->andWhere('a.role != :role')
                ->setParameter('role', $registration->getRole())
                ->setParameter('cancelled', 'cancelled')
                ->setParameter('lvl', $registration->getLevel());

        return $qb->getQuery()->getResult();
    }

}
